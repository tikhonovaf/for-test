package main.java.ru.tikhonovaf.samples.stream;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class CreateStream {
    public static void main(String[] args) {
        //üìö 1. –ò–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        //    –°–∞–º—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî —á–µ—Ä–µ–∑ Collection.stream():
        List<String> list = List.of("Java", "Stream", "API");
        Stream<String> stream = list.stream();

        List<String> result = stream
                .filter(s -> s.length() > 3)
                .map(String::toUpperCase)
                .toList();

        //üî¢ 2. –ò–∑ –º–∞—Å—Å–∏–≤–æ–≤
        //    –° –ø–æ–º–æ—â—å—é Arrays.stream():
        int[] numbers = {1, 2, 3};
        IntStream intStream = Arrays.stream(numbers);

        List<Integer> intList = intStream
                .filter(i -> i % 2 == 0)
                .boxed().toList();


        //    –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤:
        String[] words = {"hello", "world"};
        Stream<String> wordStream = Arrays.stream(words);


        //üß™ 3. –ß–µ—Ä–µ–∑ Stream.of()
        //    –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
        Stream<String> streamStr = Stream.of("Java", "Python", "Kotlin");


        //üîÅ 4. –ß–µ—Ä–µ–∑ Stream.generate()
        //    –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:
        Stream<Double> randoms = Stream.generate(Math::random).limit(5);


        //üîÑ 5. –ß–µ—Ä–µ–∑ Stream.iterate()
        //    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
        Stream<Integer> evenNumbers = Stream.iterate(0, n -> n + 2).limit(10);


        //üìÑ 6. –ò–∑ —Ñ–∞–π–ª–∞
        //    –° –ø–æ–º–æ—â—å—é Files.lines():

        try (Stream<String> lines = Files.lines(Paths.get("data.txt"))) {
            lines.forEach(System.out::println);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    //üß¨7.  –ò–∑ —Å—Ç—Ä–æ–∫–∏ (—á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
    //  –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏  –Ω–∞ —Å–ª–æ–≤–∞:
        Stream<String> patWords = Pattern.compile("\\s+").splitAsStream("Java Stream API");


    // üß†8. –ò–∑ Builder –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è:
        Stream.Builder<String> builder = Stream.builder();
        builder.add("Java").
                add("Stream").
                add("Builder");
        Stream<String> builderStream = builder.build();

    }
}